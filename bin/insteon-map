#!/usr/bin/env node

'use strict';

var Insteon = require('../').Insteon;
var util = require('util');
var program = require('commander');
var pkg = require('../package.json');
var version = pkg.version;

program
  .version(version)
  .usage('[options] <host:port>')
  .option('-v, --verbose', 'more output')
  .parse(process.argv);

if(program.args.length !== 1) {
  return program.help();
}

var host, port;

var uri = program.args.shift();
var uriParts = uri.split(':');

host = uriParts[0];
if(uriParts.length > 1) {
  port = parseInt(uriParts[1]);
}

console.log('Connecting to ' + uri);
var gw = new Insteon();

var network = {};

gw.on('connect', function () {
  console.log('Connected');

  gw.info(function onInfo(err, info) {
    if(err) {
      return console.log('Failed to connect to gateway, ' + err);
    }

    network[info.id] = info;
    console.log('Found gateway: ' + info.id + ' - ' + info.deviceCategory.name);

    console.log('Getting links for gateway ' + info.id);
    gw.links(function onLinksFound(err, links){
      if(err) {
        return console.log('Failed to find any links because of an error, ' + err);
      }

      if(links && links.length > 0){
        network[info.id].links = links.slice(); // copy array
        program.verbose && console.log('Found links: \n' + util.inspect(links));

        foundLinks(links);
      } else {
        console.log('No links found.  Entering linking mode for 3 minutes.\n\nHold set button on device.');
        gw.link({timeout: 180}, function(err, link) {
          if(err) {
            return console.log('Failed to link, ' + err);
          }

          foundLinks([link]);
        });
      }
    });
  });
});

gw.on('close', function() {
  console.log('Connection closed');
});

gw.on('error', function(err) {
  console.log(err.stack);
});

gw.connect(host, port);


function foundLinks(links) {
  if(links.length === 0) {
    // All Donefor(var id in network)
    return printNetwork();
  }
  var link = links.shift();

  if(network[link.id] !== undefined){
    return foundLinks(links); // already found this link
  }

  gw.info(link.id, function onProfile(err, profile) {
    if(err){
      return console.log(err.stack);
    }

    if(!profile){
      console.log('Found new link: ' + link.id + ' - Unresponsive!');
      network[link.id] = null;
      return foundLinks(links);
    }

    console.log('Found new link: ' + link.id + (profile.deviceCategory ? ' - ' + profile.deviceCategory.name : ''));
    network[link.id] = profile;

    console.log('Getting links for  device ' + link.id);
    gw.links(link.id, function onDeviceLinksFound(err, moreLinks) {
      if(err) {
        console.log('Error getting links for devcie ' + link.id + ' - skipping');
        return foundLinks(links);
      }
      program.verbose && console.log('Found links: \n' + util.inspect(moreLinks));
      network[link.id].links = moreLinks;
      foundLinks(links.concat(moreLinks));
    });
  });
}

function printNetwork() {
  console.log('\n\nNetwork Map:');
  for(var id in network) {
    var controls = {};
    var type = 'Unresponsive';
    if(network[id]){
      type = network[id].deviceCategory ? network[id].deviceCategory.name : 'Unknown Type';
      for(var i = 0; i<network[id].links.length; i++){
        var link = network[id].links[i];
        if(link.controller) {
          var grp = link.group.toString();
          controls[grp] = controls[grp] || [];
          controls[grp].push(network[id].links[i].id);
        }
      }
    }
    console.log('%s - %s', id, type);
    for(var g in controls) {
      console.log('\tControl group %s: %s', g, controls[g].join());
    }
  }
  process.exit();
}